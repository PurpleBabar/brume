#!/usr/bin/env python

import os
import click
import yaml
import brumecli

from glob import glob


conf = brumecli.Config.load('brume.yml')
templates_config = conf['templates']
cf_config = conf['stack']


def collect_templates():
    """Convert every .cform template into a Template."""
    templates = glob(os.path.join(templates_config.get('local_path', ''), '*.cform'))
    return [brumecli.Template(t, templates_config) for t in templates]


@click.command()
def config():
    """Print the current stack confguration."""
    print(yaml.dump(conf))


@click.command()
def create():
    """Create a new CloudFormation stack."""
    stack = brumecli.Stack(cf_config)
    stack.create()


@click.command()
def update():
    """Update an existing CloudFormation stack."""
    stack = brumecli.Stack(cf_config)
    stack.update()


@click.command()
def deploy():
    """Create or update a CloudFormation stack."""
    stack = brumecli.Stack(cf_config)
    stack.create_or_update()


@click.command()
def delete():
    """Delete a CloudFormation stack."""
    stack = brumecli.Stack(cf_config)
    stack.delete()


@click.command()
def validate():
    """Validate CloudFormation templates."""
    templates = collect_templates()
    return map(lambda t: t.validate(), templates)


@click.command()
def upload():
    """Upload CloudFormation templates to S3."""
    templates = collect_templates()
    [t.upload() for t in templates]


@click.group()
def cli():
    pass

cli.add_command(create)
cli.add_command(update)
cli.add_command(deploy)
cli.add_command(upload)
cli.add_command(delete)
cli.add_command(validate)
cli.add_command(config)

if __name__ == '__main__':
    cli()
